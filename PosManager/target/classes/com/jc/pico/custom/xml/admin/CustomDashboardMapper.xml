<?xml version="1.0" encoding="UTF-8" ?><!--
  ~ Filename	: CustomStoreMapper.xml
  ~ Function	:
  ~ Comment 	:
  ~ History	: 
  ~
  ~ Version	: 1.0
  ~ Author   : 
  -->

<!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.jc.pico.utils.customMapper.admin.CustomDashboardMapper">

	<resultMap id="BrandInfoListResultMap" type="java.util.LinkedHashMap" autoMapping="false">
    <id column="ID" jdbcType="BIGINT" property="id" />
    <result column="BRAND_NM" jdbcType="VARCHAR" property="brandNm" />
    <result column="STORE_CNT" jdbcType="VARCHAR" property="storeCnt" />
    <result column="TOTAL_SALES_CNT" jdbcType="VARCHAR" property="totalSalesCnt" />
    <result column="TOTAL_SALES_AMT" jdbcType="VARCHAR" property="totalSalesAmt" />    
    <result column="AVERAGE_SALES_CNT" jdbcType="VARCHAR" property="averageSalesCnt" />
    <result column="AVERAGE_SALES_AMT" jdbcType="VARCHAR" property="averageSalesAmt" />
    <result column="TOTAL_SO_CNT" jdbcType="VARCHAR" property="totalSoCnt" />
    <result column="TOTAL_RV_CNT" jdbcType="VARCHAR" property="totalRvCnt" />
    <result column="TOTAL_PC_CNT" jdbcType="VARCHAR" property="totalPcCnt" />
    <result column="AVERAGE_SO_CNT" jdbcType="VARCHAR" property="averageSoCnt" />
    <result column="AVERAGE_RV_CNT" jdbcType="VARCHAR" property="averageRvCnt" />
    <result column="AVERAGE_PC_CNT" jdbcType="VARCHAR" property="averagePcCnt" />
    <result column="STAMP_CNT" jdbcType="VARCHAR" property="stampCnt" />
    <result column="COUPON_CNT" jdbcType="VARCHAR" property="couponCnt" />
    <result column="COUPON_USED_CNT" jdbcType="VARCHAR" property="couponUsedCnt" />
    <result column="AVERAGE_STAMP_CNT" jdbcType="VARCHAR" property="averageStampCnt" />
    <result column="AVERAGE_COUPON_CNT" jdbcType="VARCHAR" property="averageCouponCnt" />
    <result column="AVERAGE_CU_CNT" jdbcType="VARCHAR" property="averageCuCnt" />
  </resultMap>
  
  	<!-- Franchise Dashboard-->
  	<!-- 프랜차이즈 브랜드별 매출목록 -->
	<select id="getBrandInfoList" parameterType="hashMap" resultMap="BrandInfoListResultMap"> 
    SELECT
        IFNULL(STORE_CNT,0) STORE_CNT ,
        BRAND_NM ,
        IFNULL(TOTAL_SALES_CNT,0) TOTAL_SALES_CNT ,
        IFNULL(TOTAL_SALES_AMT,0) TOTAL_SALES_AMT ,
        IFNULL(TOTAL_SO_CNT,0) TOTAL_SO_CNT ,
        IFNULL(TOTAL_RV_CNT,0) TOTAL_RV_CNT ,
        IFNULL(TOTAL_PC_CNT,0) TOTAL_PC_CNT ,
        IFNULL(STAMP_CNT,0) STAMP_CNT ,
        IFNULL(COUPON_CNT,0) COUPON_CNT ,
        IFNULL(COUPON_USED_CNT,0) COUPON_USED_CNT ,
        IFNULL(ROUND((TOTAL_SALES_CNT / STORE_CNT),2),0) AVERAGE_SALES_CNT ,
        IFNULL(ROUND((TOTAL_SALES_AMT / STORE_CNT),2),0) AVERAGE_SALES_AMT ,
        IFNULL(ROUND((TOTAL_SO_CNT / STORE_CNT),2),0) AVERAGE_SO_CNT ,
        IFNULL(ROUND((TOTAL_RV_CNT / STORE_CNT),2),0) AVERAGE_RV_CNT ,
        IFNULL(ROUND((TOTAL_PC_CNT / STORE_CNT),2),0) AVERAGE_PC_CNT ,
        IFNULL(ROUND((STAMP_CNT / STORE_CNT),2),0) AVERAGE_STAMP_CNT ,
        IFNULL(ROUND((COUPON_CNT / STORE_CNT),2),0) AVERAGE_COUPON_CNT ,
        IFNULL(ROUND((COUPON_USED_CNT / STORE_CNT),2),0) AVERAGE_CU_CNT 
    FROM
        (SELECT
            /* */ SB.ID ,
            SB.BRAND_NM ,
            (SELECT
                COUNT(ID) 
            FROM
                TB_SVC_STORE 
            WHERE
                BRAND_ID = SB.ID) AS STORE_CNT ,
            SS.TOTAL_SALES_CNT ,
            SS.TOTAL_SALES_AMT ,
            SS.TOTAL_SO_CNT ,
            SS.TOTAL_RV_CNT ,
            SS.TOTAL_PC_CNT ,
            SC.STAMP_CNT ,
            TT.COUPON_CNT ,
            TT.COUPON_USED_CNT 
        FROM
            TB_SVC_BRAND SB 
        LEFT JOIN
            (
                SELECT
                    BRAND_ID ,
                    STORE_ID ,
                    COUNT(ID) AS TOTAL_SALES_CNT ,
                    SUM(SALES) AS TOTAL_SALES_AMT ,
                    SUM(CASE 
                        WHEN ORDER_TP = '605001' THEN 1 
                        ELSE 0 
                    END) AS TOTAL_SO_CNT ,
                    SUM(CASE 
                        WHEN ORDER_TP = '605002' THEN 1 
                        ELSE 0 
                    END) AS TOTAL_RV_CNT ,
                    SUM(CASE 
                        WHEN ORDER_TP = '605003' THEN 1 
                        ELSE 0 
                    END) AS TOTAL_PC_CNT 
                FROM
                    TB_SVC_SALES 
                WHERE
                    SALES_TM_LOCAL BETWEEN DATE_ADD(#{fromDate}, INTERVAL 0 SECOND) AND DATE_ADD(#{fromDate}, INTERVAL '23:59:59' HOUR_SECOND) /* 별도 SQL 분리 */ 
                    AND SALES_ST = '809001' /* 별도 SQL 분리 */ 
                GROUP BY
                    BRAND_ID ,
                    STORE_ID
            ) SS 
                ON SB.ID = SS.BRAND_ID 
        LEFT JOIN
            (
              SELECT 
                SUS.STORE_ID ,
                SUS.BRAND_ID ,
              IF(STAMP_ST='401001',COUNT(STAMP_ST),0) AS STAMP_CNT   
              FROM TB_SVC_USER_STAMP SUS
              LEFT OUTER JOIN (
                       SELECT 
                        ID,
                        BRAND_ID,
                        STORE_ID
                       FROM TB_SVC_SALES
                       WHERE SALES_ST = '809001'
                       AND SALES_TM_LOCAL BETWEEN DATE_ADD(#{fromDate}, INTERVAL 0 SECOND) AND DATE_ADD(#{fromDate}, INTERVAL '23:59:59' HOUR_SECOND) /* 별도 SQL 분리 */ 
                      ) SS ON SUS.SALES_ID = SS.ID
              GROUP BY SUS.BRAND_ID
                      
     <!--           SELECT
                    BRAND_ID,
                    COUNT(*) STAMP_CNT 
                FROM
                    TB_SVC_USER_STAMP US 
                WHERE
                    US.CREATED BETWEEN DATE_ADD(#{fromDate}, INTERVAL 0 SECOND) AND DATE_ADD(#{fromDate}, INTERVAL '23:59:59' HOUR_SECOND) /* 별도 SQL 분리 *\/ 
                group by
                    BRAND_ID  -->
            ) SC 
                ON SB.ID = SC.BRAND_ID 
        LEFT JOIN
            (
                SELECT 
                BRAND_ID,
                (ISSUE_COUPON + USED_COUPON + EXPIRE_COUPON) AS COUPON_CNT,
                USED_COUPON AS COUPON_USED_CNT
              FROM (
                  SELECT
                    BRAND_ID,
                    USED,
                    SUM(IF(COUPON_ST='402001', 1, 0)) AS ISSUE_COUPON,
                    SUM(IF(COUPON_ST='402003', 1, 0)) AS USED_COUPON,
                    SUM(IF(COUPON_ST='402005', 1, 0)) AS EXPIRE_COUPON
                  FROM TB_SVC_USER_COUPON
                  WHERE CREATED BETWEEN DATE_ADD(#{fromDate}, INTERVAL 0 SECOND) AND DATE_ADD(#{fromDate}, INTERVAL '23:59:59' HOUR_SECOND) /* 별도 SQL 분리 */ 
                 ) UC
             WHERE BRAND_ID IS NOT NULL
             GROUP BY BRAND_ID, USED
            ) TT 
                ON SB.ID = TT.BRAND_ID 
        WHERE 1=1
        <if test="brandId != null"> 
        AND SB.FRAN_ID = ${franId}
        </if>
        ) DD
	</select>
  
  	<!-- Brand Dashboard-->
  	<!-- 브랜드 매출정보 -->
	<select id="getBrandInfo" parameterType="hashMap" resultMap="BrandInfoListResultMap"> 
		    SELECT
        IFNULL(STORE_CNT,0) STORE_CNT ,
        BRAND_NM ,
        IFNULL(TOTAL_SALES_CNT,0) TOTAL_SALES_CNT ,
        IFNULL(TOTAL_SALES_AMT,0) TOTAL_SALES_AMT ,
        IFNULL(TOTAL_SO_CNT,0) TOTAL_SO_CNT ,
        IFNULL(TOTAL_RV_CNT,0) TOTAL_RV_CNT ,
        IFNULL(TOTAL_PC_CNT,0) TOTAL_PC_CNT ,
        IFNULL(ROUND((TOTAL_SALES_CNT / STORE_CNT),2),0) AVERAGE_SALES_CNT ,
        IFNULL(ROUND((TOTAL_SALES_AMT / STORE_CNT),2),0) AVERAGE_SALES_AMT ,
        IFNULL(ROUND((TOTAL_SO_CNT / STORE_CNT),2),0) AVERAGE_SO_CNT ,
        IFNULL(ROUND((TOTAL_RV_CNT / STORE_CNT),2),0) AVERAGE_RV_CNT ,
        IFNULL(ROUND((TOTAL_PC_CNT / STORE_CNT),2),0) AVERAGE_PC_CNT
       FROM
        (SELECT
            /* */ SB.ID ,
            SB.BRAND_NM ,
            (SELECT
                COUNT(ID) 
            FROM
                TB_SVC_STORE 
            WHERE
                BRAND_ID = SB.ID) AS STORE_CNT ,
            SS.TOTAL_SALES_CNT ,
            SS.TOTAL_SALES_AMT ,
            SS.TOTAL_SO_CNT ,
            SS.TOTAL_RV_CNT ,
            SS.TOTAL_PC_CNT
        FROM
            TB_SVC_BRAND SB 
        LEFT JOIN
            (
                SELECT
                    ID ,
                    BRAND_ID ,
                    COUNT(ID) AS TOTAL_SALES_CNT ,
                    SUM(SALES) AS TOTAL_SALES_AMT ,
                    SUM(CASE 
                        WHEN ORDER_TP = '605001' THEN 1 
                        ELSE 0 
                    END) AS TOTAL_SO_CNT ,
                    SUM(CASE 
                        WHEN ORDER_TP = '605002' THEN 1 
                        ELSE 0 
                    END) AS TOTAL_RV_CNT ,
                    SUM(CASE 
                        WHEN ORDER_TP = '605003' THEN 1 
                        ELSE 0 
                    END) AS TOTAL_PC_CNT 
                FROM TB_SVC_SALES
                WHERE 1 = 1 
                AND SALES_TM_LOCAL BETWEEN ADDDATE(#{fromDate}, INTERVAL 0 SECOND) AND ADDDATE(#{fromDate}, INTERVAL '23:59:59' HOUR_SECOND)
                AND SALES_ST = '809001'
                <if test="brandId != null">
                AND BRAND_ID = ${brandId}
                </if> 
                GROUP BY
                    BRAND_ID ) SS 
                        ON SB.ID = SS.BRAND_ID 
              
                WHERE 1=1
                <if test="franId != null"> 
                AND SB.FRAN_ID = ${franId}
                </if> 
                <if test="brandId != null">
                AND SB.ID = ${brandId} 
                </if>
                ) DD  
	</select>
	
	<!-- Sales Trend  -->
	<resultMap id="SalesTrendResultMap" type="java.util.LinkedHashMap" autoMapping="false">
	    <result column="LABEL" jdbcType="VARCHAR" property="label" />
	    <result column="VALUE" jdbcType="VARCHAR" property="value" />
	</resultMap>
	<select id="getSalesTrendList" parameterType="hashMap" resultMap="SalesTrendResultMap"> 
   SELECT
        DATE_FORMAT(CL.YMD,'%m-%d') AS LABEL ,
        COALESCE(A.VALUE,0) AS VALUE 
    FROM
        TB_BASE_CALENDAR CL 
    LEFT JOIN
        (
            SELECT
                DATE(`SALES_TM_LOCAL`) AS YMD ,
                ROUND(SUM(SALES),
                2) AS VALUE 
            FROM TB_SVC_SALES
            WHERE SALES_ST = '809001'
            <if test="brandId != null"> 
            AND BRAND_ID = ${brandId}
            </if>
            GROUP BY
                YMD ) A 
                    ON CL.YMD = A.YMD 
            WHERE
                CL.YMD BETWEEN DATE_FORMAT(DATE_ADD(#{fromDate}, INTERVAL -6 DAY), '%y-%m-%d') AND DATE_FORMAT(#{fromDate},'%y-%m-%d') 
            ORDER BY
                CL.YMD  
	</select>
	
	<!-- Today Sales Chart -->
	<resultMap id="SalesCharttResultMap" type="java.util.LinkedHashMap" autoMapping="false">
	    <result column="LABEL" jdbcType="VARCHAR" property="label" />
	    <result column="VALUE" jdbcType="VARCHAR" property="value" />
	</resultMap>
	<select id="getSalesChart" parameterType="hashMap" resultMap="SalesCharttResultMap"> 
    SELECT
        A.STORE_NM AS LABEL ,
        SUM(A.SALES) AS VALUE 
    FROM
        ( SELECT
            BRAND_ID ,
            (SELECT
                BRAND_NM 
            FROM
                TB_SVC_BRAND A 
            WHERE
                A.ID = BRAND_ID) AS BRAND_NM ,
            STORE_ID ,
            (SELECT
                STORE_NM 
            FROM
                TB_SVC_STORE A 
            WHERE
                A.ID = STORE_ID) AS STORE_NM ,
            SALES 
        FROM TB_SVC_SALES
        WHERE SALES_ST = '809001' 
        AND SALES_TM_LOCAL BETWEEN ADDDATE(#{fromDate}, INTERVAL 0 SECOND) AND ADDDATE(#{fromDate}, INTERVAL '23:59:59' HOUR_SECOND)
        <if test="brandId != null">
        AND BRAND_ID = ${brandId} 
        </if>
        ) A  
    GROUP BY
        A.STORE_ID 
    ORDER BY
        A.STORE_ID ;
	</select>
	
	<!-- Today Sales List  -->
	<resultMap id="SalesListResultMap" type="java.util.LinkedHashMap" autoMapping="false">
	    <result column="BRAND_ID" jdbcType="VARCHAR" property="brandId" />
	    <result column="BRAND_NM" jdbcType="VARCHAR" property="brandNm" />
	    <result column="STORE_ID" jdbcType="VARCHAR" property="storeId" />
	    <result column="STORE_NM" jdbcType="VARCHAR" property="storeNm" />
	    <result column="SALES" jdbcType="VARCHAR" property="sales" />
	</resultMap>
	<select id="getSalesList" parameterType="hashMap" resultMap="SalesListResultMap"> 
	/*getSalesList*/
	
     SELECT
        B.BRAND_ID ,
        (SELECT
            BRAND_NM 
        FROM
            TB_SVC_BRAND A 
        WHERE
            A.ID = B.BRAND_ID) AS BRAND_NM ,
        B.STORE_ID ,
        (SELECT
            STORE_NM 
        FROM
            TB_SVC_STORE A 
        WHERE
            A.ID = B.STORE_ID) AS STORE_NM ,
        SUM(B.SALES) AS SALES
    FROM TB_SVC_SALES B
    WHERE SALES_ST = '809001'
    AND SALES_TM_LOCAL BETWEEN ADDDATE(#{fromDate}, INTERVAL 0 SECOND) AND ADDDATE(#{fromDate}, INTERVAL '23:59:59' HOUR_SECOND) 
    <if test="brandId != null"> 
    AND B.BRAND_ID = ${brandId} 
    </if>
    GROUP BY
        B.STORE_ID 
   <if test='searchSort != null'>
    ORDER BY SALES ${searchSort}
    </if> 
    LIMIT 0,5
     
	</select>
	
	<!-- Store Dashboard-->
	<!-- Today Sales  -->
	<resultMap id="SalesDataResultMap" type="java.util.LinkedHashMap" autoMapping="false">
	    <result column="BRAND_ID" jdbcType="VARCHAR" property="brandId" />
	    <result column="STORE_ID" jdbcType="VARCHAR" property="storeId" />
	    <result column="TODAY_CNT" jdbcType="VARCHAR" property="totayCnt" />
	    <result column="TODAY_SALES" jdbcType="VARCHAR" property="totaySales" />
	    <result column="YESTERDAY_CNT" jdbcType="VARCHAR" property="yesterdayCnt" />
	    <result column="YESTERDAY_SALES" jdbcType="VARCHAR" property="yesterdaySales" />
	    <result column="RATE_YD" jdbcType="VARCHAR" property="rateYd" />
	    <result column="LAST_WEEK_CNT" jdbcType="VARCHAR" property="lastWeekCnt" />
	    <result column="LAST_WEEK_SALES" jdbcType="VARCHAR" property="lastWeekSales" />
	    <result column="RATE_WK" jdbcType="VARCHAR" property="rateWk" />
	</resultMap>
	<select id="getSalesData" parameterType="hashMap" resultMap="SalesDataResultMap"> 
 SELECT
        A.BRAND_ID ,
        A.STORE_ID ,
        IFNULL(A.TODAY_CNT,0) AS TODAY_CNT ,
        IFNULL(A.TODAY_SALES,0) AS TODAY_SALES ,
        IFNULL(B.YESTERDAY_CNT,0) AS YESTERDAY_CNT ,
        IFNULL(B.YESTERDAY_SALES,0) AS YESTERDAY_SALES ,
        IFNULL(ROUND(((A.TODAY_SALES - B.YESTERDAY_SALES) / B.YESTERDAY_SALES * 100),2),0) AS RATE_YD ,
        IFNULL(C.LAST_WEEK_CNT,0) AS LAST_WEEK_CNT ,
        IFNULL(C.LAST_WEEK_SALES,0) AS LAST_WEEK_SALES ,
        IFNULL(ROUND(((A.TODAY_SALES - C.LAST_WEEK_SALES) / C.LAST_WEEK_SALES * 100),2),0) RATE_WK 
    FROM
        (SELECT
            BRAND_ID,
            STORE_ID,
            COUNT(ID) AS TODAY_CNT,
            ROUND(SUM(SALES),2) AS TODAY_SALES 
        FROM
            TB_SVC_SALES
        WHERE SALES_ST = '809001' /* 별도 SQL 분리 */ 
        AND SALES_TM_LOCAL BETWEEN ADDDATE(#{fromDate}, INTERVAL 0 SECOND) AND ADDDATE(#{fromDate}, INTERVAL '23:59:59' HOUR_SECOND)
        <if test="brandId != null">
        AND BRAND_ID = ${brandId} 
        </if>
        <if test="storeId != null">
        AND STORE_ID = ${storeId} 
        </if>
        ) A 
    LEFT JOIN
        (
            SELECT
                BRAND_ID,
                STORE_ID,
                COUNT(ID) AS YESTERDAY_CNT,
                ROUND(SUM(SALES),2) AS YESTERDAY_SALES 
            FROM
                TB_SVC_SALES 
            WHERE SALES_ST = '809001' /* 별도 SQL 분리 */ 
            AND SALES_TM_LOCAL BETWEEN ADDDATE(ADDDATE(#{fromDate}, INTERVAL -1 DAY), INTERVAL 0 SECOND) AND ADDDATE(ADDDATE(#{fromDate}, INTERVAL -1 DAY), INTERVAL '23:59:59' HOUR_SECOND)
            <if test="brandId != null">
            AND BRAND_ID = ${brandId}
            </if>
            <if test="storeId != null">
            AND STORE_ID = ${storeId} 
            </if>
            GROUP BY
                BRAND_ID,
                STORE_ID 
        ) B 
            ON B.BRAND_ID = A.BRAND_ID 
            AND B.STORE_ID = A.STORE_ID 
    LEFT JOIN
        (
            SELECT
                BRAND_ID,
                STORE_ID,
                COUNT(ID) AS LAST_WEEK_CNT,
                ROUND(SUM(SALES),2) AS LAST_WEEK_SALES 
            FROM
                TB_SVC_SALES 
            WHERE SALES_TM_LOCAL BETWEEN DATE_ADD(DATE_ADD(#{fromDate}, INTERVAL (-7 - WEEKDAY(#{fromDate})) DAY), INTERVAL 0 SECOND) AND DATE_ADD(DATE_ADD(DATE_ADD(#{fromDate}, INTERVAL (-1 - WEEKDAY(#{fromDate})) DAY), INTERVAL 0 SECOND), INTERVAL '23:59:59' HOUR_SECOND)
            AND SALES_ST = '809001'
            <if test="brandId != null"> 
            AND BRAND_ID = ${brandId} 
            </if>
            <if test="storeId != null">
            AND STORE_ID = ${storeId} 
            </if>
            GROUP BY
                BRAND_ID,
                STORE_ID 
        ) C 
            ON C.BRAND_ID = A.BRAND_ID 
            AND C.STORE_ID = A.STORE_ID 
 WHERE A.BRAND_ID IS NOT NULL
	</select>
  
	<!-- Today Service  -->
	<resultMap id="ServiceDataResultMap" type="java.util.LinkedHashMap" autoMapping="false">
	    <id column="ID" jdbcType="BIGINT" property="id" />
	    <result column="BRAND_ID" jdbcType="VARCHAR" property="brandId" />
	    <result column="STORE_ID" jdbcType="VARCHAR" property="storeId" />
	    <result column="TOTAL_SO_CNT" jdbcType="VARCHAR" property="totalSoCnt" />
	    <result column="TOTAL_RV_CNT" jdbcType="VARCHAR" property="totalRvCnt" />
	    <result column="TOTAL_PC_CNT" jdbcType="VARCHAR" property="totalPcCnt" />
	</resultMap>
	
	<select id="getServiceData" parameterType="hashMap" resultMap="ServiceDataResultMap"> 

    SELECT
        S.ID ,
        (SELECT
            TITLE 
        FROM
            TB_BASE_BCODE 
        WHERE
            BASE_CD = S.ORDER_TP) ORDER_NM ,
        S.SALES ,
        U.NAME 
    FROM
        ( SELECT
            ID ,
            BRAND_ID ,
            STORE_ID ,
            SALES_ST ,
            SALES ,
            ORDER_TP ,
            ORDER_ID ,
            SALES_TM_LOCAL
        FROM
            TB_SVC_SALES 
        WHERE PATH_TP = '606002' 
        AND SALES_ST = '809001'
        AND SALES_TM_LOCAL BETWEEN ADDDATE(#{fromDate}, INTERVAL 0 SECOND) AND ADDDATE(#{fromDate}, INTERVAL '23:59:59' HOUR_SECOND)
        <if test="brandId != null">
        AND BRAND_ID = ${brandId} 
        </if>
        <if test="storeId != null">
        AND STORE_ID = ${storeId}
        </if> 
        ) S 
    JOIN
        TB_SVC_ORDER O 
            ON S.ORDER_ID = O.ID 
    JOIN
        TB_USER U 
            ON U.ID = O.USER_ID 
    ORDER BY
        S.SALES_TM_LOCAL DESC LIMIT 0,
        5  
	</select>
	
	<!-- Today Top5 Item  -->
	<resultMap id="ItemListResultMap" type="java.util.LinkedHashMap" autoMapping="false">
	    <result column="LABEL" jdbcType="VARCHAR" property="label" />
	    <result column="SUN" jdbcType="VARCHAR" property="sun" />
	    <result column="MON" jdbcType="VARCHAR" property="mon" />
	    <result column="TUE" jdbcType="VARCHAR" property="tue" />
	    <result column="WED" jdbcType="VARCHAR" property="wed" />
	    <result column="THU" jdbcType="VARCHAR" property="thu" />
	    <result column="FRI" jdbcType="VARCHAR" property="fri" />
	    <result column="SAT" jdbcType="VARCHAR" property="sat" />
	</resultMap>
	<select id="getItemList" parameterType="hashMap" resultMap="ItemListResultMap"> 
    SELECT
        I.ITEM_NM AS LABEL ,
        ROUND(SUM(IF(I.DAYOFWEEK=1,VALUE,0)),0) AS 'SUN' ,
        ROUND(SUM(IF(I.DAYOFWEEK=2,VALUE,0)),0) AS 'MON' ,
        ROUND(SUM(IF(I.DAYOFWEEK=3,VALUE,0)),0) AS 'TUE' ,
        ROUND(SUM(IF(I.DAYOFWEEK=4,VALUE,0)),0) AS 'WED' ,
        ROUND(SUM(IF(I.DAYOFWEEK=5,VALUE,0)),0) AS 'THU' ,
        ROUND(SUM(IF(I.DAYOFWEEK=6,VALUE,0)),0) AS 'FRI' ,
        ROUND(SUM(IF(I.DAYOFWEEK=7,VALUE,0)),0) AS 'SAT' 
    FROM
        ( 
            SELECT
                ITEM_NM ,
                SALES AS VALUE ,
                DAYOFWEEK ,
                ITEM_ID 
            FROM
                (SELECT
                    A.ID ,
                    A.SALES_ID ,
                    A.ITEM_ID ,
                    A.ITEM_NM ,
                    A.CAT_NM ,
                    ROUND(sum(A.PRICE),2) AS PRICE /* 가격 */ ,
                    ROUND(sum(A.PURCHASE_PRICE),2) AS PURCHASE_PRICE /* 매입단가 */ ,
                    ROUND(sum(A.COUNT),2) AS COUNT /* 수량 */ ,
                    ROUND(sum(A.SALES),2) AS SALES /* 매출 */ ,
                    DAYOFWEEK(B.SALES_TM_LOCAL) DAYOFWEEK ,
                    B.BRAND_ID
                FROM
                    TB_SVC_SALES_ITEM A 
                LEFT OUTER JOIN
                    TB_SVC_SALES B ON A.SALES_ID = B.ID
                WHERE 1 = 1 
                AND B.SALES_TM_LOCAL BETWEEN ADDDATE(ADDDATE(#{fromDate}, INTERVAL -6 DAY), INTERVAL 0 SECOND) AND ADDDATE(#{fromDate}, INTERVAL '23:59:59' HOUR_SECOND)
                AND B.SALES_ST = 809001
                AND A.SALES_ST = 809001
                <if test="brandId != null"> 
                AND B.BRAND_ID = ${brandId} 
                </if>
                <if test="storeId != null">
                AND B.STORE_ID = ${storeId}
                </if>
                GROUP BY
                    A.ITEM_ID,
                    DAYOFWEEK) AS A 
             ORDER BY
             A.SALES DESC ) I 
GROUP BY I.ITEM_ID, LABEL 
ORDER BY VALUE DESC LIMIT 0,5

	</select>
	
	<!-- Today Top5 Category  -->
	<resultMap id="CategoryListResultMap" type="java.util.LinkedHashMap" autoMapping="false">
	    <result column="LABEL" jdbcType="VARCHAR" property="label" />
      <result column="SUN" jdbcType="VARCHAR" property="sun" />
      <result column="MON" jdbcType="VARCHAR" property="mon" />
      <result column="TUE" jdbcType="VARCHAR" property="tue" />
      <result column="WED" jdbcType="VARCHAR" property="wed" />
      <result column="THU" jdbcType="VARCHAR" property="thu" />
      <result column="FRI" jdbcType="VARCHAR" property="fri" />
      <result column="SAT" jdbcType="VARCHAR" property="sat" />
	</resultMap>
	<select id="getCategoryList" parameterType="hashMap" resultMap="CategoryListResultMap"> 
		SELECT
        I.CAT_NM AS LABEL ,
        I.CAT_CD ,
        ROUND(SUM(IF(I.DAYOFWEEK=1,VALUE,0)),0) AS 'SUN' ,
        ROUND(SUM(IF(I.DAYOFWEEK=2,VALUE,0)),0) AS 'MON' ,
        ROUND(SUM(IF(I.DAYOFWEEK=3,VALUE,0)),0) AS 'TUE' ,
        ROUND(SUM(IF(I.DAYOFWEEK=4,VALUE,0)),0) AS 'WED' ,
        ROUND(SUM(IF(I.DAYOFWEEK=5,VALUE,0)),0) AS 'THU' ,
        ROUND(SUM(IF(I.DAYOFWEEK=6,VALUE,0)),0) AS 'FRI' ,
        ROUND(SUM(IF(I.DAYOFWEEK=7,VALUE,0)),0) AS 'SAT' 
    FROM
        (
            SELECT
                ITEM_NM ,
                CAT_NM ,
                CAT_CD ,
                SALES AS VALUE ,
                DAYOFWEEK ,
                ITEM_ID
            FROM
                ( SELECT
                    A.ID ,
                    A.SALES_ID ,
                    A.ITEM_ID ,
                    A.ITEM_NM ,
                    A.CAT_NM ,
                    A.CAT_CD ,
                    ROUND(sum(A.PRICE),2) AS PRICE /* 가격 */ ,
                    ROUND(sum(A.PURCHASE_PRICE),2) AS PURCHASE_PRICE /* 매입단가 */ ,
                    ROUND(sum(A.COUNT),2) AS COUNT /* 수량 */ ,
                    ROUND(sum(A.SALES),2) AS SALES /* 매출 */ ,
                    DAYOFWEEK(B.SALES_TM_LOCAL) DAYOFWEEK ,
                    B.BRAND_ID
                FROM
                    TB_SVC_SALES_ITEM A 
                LEFT OUTER JOIN
                    TB_SVC_SALES B ON A.SALES_ID = B.ID
                WHERE 1=1 
                AND B.SALES_TM_LOCAL BETWEEN ADDDATE(ADDDATE(#{fromDate}, INTERVAL -6 DAY), INTERVAL 0 SECOND) AND ADDDATE(#{fromDate}, INTERVAL '23:59:59' HOUR_SECOND)
                AND B.SALES_ST = 809001
                AND A.SALES_ST = 809001 
                <if test="brandId != null">
                AND B.BRAND_ID = ${brandId}
                </if> 
                <if test="storeId != null">
                AND B.STORE_ID = ${storeId}
                </if>
                GROUP BY
                    A.CAT_CD,
                    DAYOFWEEK) AS A 
                ORDER BY
                    A.SALES DESC ) I
    GROUP BY I.CAT_CD, LABEL 
    ORDER BY VALUE DESC 
    LIMIT 0, 5;
    

	</select>
	
	<!-- Today Payment List  -->
	<resultMap id="PaymentListResultMap" type="java.util.LinkedHashMap" autoMapping="false">
	    <id column="ID" jdbcType="BIGINT" property="id" />
	    <result column="ORDER_NM" jdbcType="VARCHAR" property="orderNm" />
	    <result column="SALES" jdbcType="VARCHAR" property="sales" />
	    <result column="NAME" jdbcType="VARCHAR" property="name" />
	</resultMap>
	<select id="getPaymentList" parameterType="hashMap" resultMap="PaymentListResultMap"> 
		
    SELECT
        S.ID ,
        (SELECT
            TITLE          
        FROM
            TB_BASE_BCODE          
        WHERE
            BASE_CD = S.ORDER_TP) ORDER_NM ,
        S.SALES ,
        U.NAME      
    FROM
        (
        SELECT
			            ID ,
			            BRAND_ID ,
			            STORE_ID ,
			            SALES_ST ,
			            SALES ,
			            ORDER_TP ,
			            ORDER_ID ,
			            SALES_TM_LOCAL ,
			            DATE_FORMAT(OPEN_DT,'%Y-%c-%d') AS OPEN_DT                          
        FROM
            TB_SVC_SALES                          
        WHERE 1 = 1
        <if test="brandId != null">
        AND BRAND_ID = ${brandId}
        </if>
        <if test="storeId != null">
        AND STORE_ID = ${storeId}
        </if>
        AND PATH_TP = '606002'
        AND SALES_ST = '809001') S
    LEFT OUTER JOIN
        (
            SELECT
                BRAND_ID ,
                STORE_ID ,
                DATE_FORMAT(MAX(OPEN_DT), '%Y-%c-%d') AS OPEN_DT
            FROM
                TB_SVC_CLOSING                          
            WHERE 1 = 1
            <if test="brandId != null">
            AND BRAND_ID = ${brandId}
            </if>
            <if test="storeId != null">
            AND STORE_ID = ${storeId}
            </if>
            GROUP BY STORE_ID
        ) SC                          
            ON S.OPEN_DT = SC.OPEN_DT     
    JOIN
        TB_SVC_ORDER O              
            ON S.ORDER_ID = O.ID             
    JOIN
        TB_USER U              
            ON U.ID = O.USER_ID      
    WHERE
        S.OPEN_DT = SC.OPEN_DT     
    ORDER BY
        S.SALES_TM_LOCAL DESC LIMIT 0,5  
	</select>
	
	<!-- This and Last week customer list  -->
	<resultMap id="CustomerList" type="java.util.LinkedHashMap" autoMapping="false">
	    <result column="ONLINE" jdbcType="VARCHAR" property="online"/>
	    <result column="OFFLINE" jdbcType="VARCHAR" property="offline"/>
	    <result column="LABEL" jdbcType="VARCHAR" property="label"/>
	    <result column="ON_OFF_LINE" jdbcType="VARCHAR" property="onOffline"/>
	</resultMap>
	
	<select id="getThisWeekCustomerList" parameterType="hashMap" resultMap="CustomerList"> 
  SELECT /* getWeekCustomerList */
				  CASE
				    WHEN DAYOFWEEK(BC.YMD)=1 THEN 'SUN'
				    WHEN DAYOFWEEK(BC.YMD)=2 THEN 'MON'
				    WHEN DAYOFWEEK(BC.YMD)=3 THEN 'TUE'
				    WHEN DAYOFWEEK(BC.YMD)=4 THEN 'THU'
				    WHEN DAYOFWEEK(BC.YMD)=5 THEN 'WED'
				    WHEN DAYOFWEEK(BC.YMD)=6 THEN 'FRI'
				    WHEN DAYOFWEEK(BC.YMD)=7 THEN 'SAT'
				  END AS LABEL,
				  IFNULL(OFFLINE, 0) AS OFFLINE,
				  IFNULL(ONLINE, 0) AS ONLINE
	FROM TB_BASE_CALENDAR BC
	LEFT OUTER JOIN (
	    SELECT 
	      BRAND_ID, 
	      STORE_ID,
	      SUM(IF(ISNULL(USER_ID), 1, 0)) AS OFFLINE,
	      SUM(IF(ISNULL(USER_ID), 0, 1)) AS ONLINE,
	      DATE_FORMAT(SALES_TM_LOCAL, '%Y-%m-%d') AS YMD
	    FROM TB_SVC_SALES
	    WHERE SALES_TM_LOCAL BETWEEN ADDDATE(#{salesFromDate}, INTERVAL 0 SECOND) AND ADDDATE(#{salesToDate}, INTERVAL '23:59:59' HOUR_SECOND)
	    AND SALES_ST = 809001
	    <if test="brandId != null">
	    AND BRAND_ID = ${brandId}
	    </if>
	    <if test="storeId != null">
	     AND STORE_ID = ${storeId}
	    </if>
	    GROUP BY YMD
	  ) A ON BC.YMD = A.YMD
	WHERE BC.YMD BETWEEN ADDDATE(#{calendarFromDate}, INTERVAL 0 SECOND) AND ADDDATE(#{calendarToDate}, INTERVAL '23:59:59' HOUR_SECOND)
	ORDER BY BC.YMD
	</select>
	
	  <select id="getSearchLastCustomerList" parameterType="hashMap" resultMap="CustomerList"> 
  SELECT
          IFNULL(OFFLINE,0) + IFNULL(ONLINE,0) AS ON_OFF_LINE
  FROM TB_BASE_CALENDAR BC
  LEFT OUTER JOIN (
      SELECT 
        BRAND_ID, 
        STORE_ID,
        SUM(IF(ISNULL(USER_ID), 1, 0)) AS OFFLINE,
        SUM(IF(ISNULL(USER_ID), 0, 1)) AS ONLINE,
        DATE_FORMAT(SALES_TM_LOCAL, '%Y-%m-%d') AS YMD
      FROM TB_SVC_SALES
      WHERE SALES_TM_LOCAL BETWEEN ADDDATE(#{salesFromDate}, INTERVAL 0 SECOND) AND ADDDATE(#{salesToDate}, INTERVAL '23:59:59' HOUR_SECOND) 
      AND SALES_ST = 809001
      <if test="brandId != null">
      AND BRAND_ID = ${brandId}
      </if>
      GROUP BY YMD
    ) A ON BC.YMD = A.YMD
  WHERE BC.YMD BETWEEN ADDDATE(#{calendarFromDate}, INTERVAL 0 SECOND) AND ADDDATE(#{calendarToDate}, INTERVAL '23:59:59' HOUR_SECOND) 
  ORDER BY BC.YMD
  </select> 
	
	
	 <select id="getThisMonthCustomerList" parameterType="hashMap" resultMap="CustomerList"> 
   SELECT
        IFNULL(OFFLINE,0) AS OFFLINE,
        IFNULL(ONLINE,0) AS ONLINE,
        CASE
          WHEN DAY(BC.YMD)=1 THEN  '1'
      WHEN DAY(BC.YMD)=2 THEN  '2'
      WHEN DAY(BC.YMD)=3 THEN  '3'
      WHEN DAY(BC.YMD)=4 THEN  '4'
      WHEN DAY(BC.YMD)=5 THEN  '5'
      WHEN DAY(BC.YMD)=6 THEN  '6'
      WHEN DAY(BC.YMD)=7 THEN  '7'
      WHEN DAY(BC.YMD)=8 THEN  '8'
      WHEN DAY(BC.YMD)=9 THEN  '9'
      WHEN DAY(BC.YMD)=10 THEN  '10'
      WHEN DAY(BC.YMD)=11 THEN  '11'
      WHEN DAY(BC.YMD)=12 THEN  '12'
      WHEN DAY(BC.YMD)=13 THEN  '13'
      WHEN DAY(BC.YMD)=14 THEN  '14'
      WHEN DAY(BC.YMD)=15 THEN  '15'
      WHEN DAY(BC.YMD)=16 THEN  '16'
      WHEN DAY(BC.YMD)=17 THEN  '17'
      WHEN DAY(BC.YMD)=18 THEN  '18'
      WHEN DAY(BC.YMD)=19 THEN  '19'
      WHEN DAY(BC.YMD)=20 THEN  '20'
      WHEN DAY(BC.YMD)=21 THEN  '21'
      WHEN DAY(BC.YMD)=22 THEN  '22'
      WHEN DAY(BC.YMD)=23 THEN  '23'
      WHEN DAY(BC.YMD)=24 THEN  '24'
      WHEN DAY(BC.YMD)=25 THEN  '25'
      WHEN DAY(BC.YMD)=26 THEN  '26'
      WHEN DAY(BC.YMD)=27 THEN  '27'
      WHEN DAY(BC.YMD)=28 THEN  '28'
      WHEN DAY(BC.YMD)=29 THEN  '29'
      WHEN DAY(BC.YMD)=30 THEN  '30'
      WHEN DAY(BC.YMD)=31 THEN  '31'
        END AS LABEL
  FROM
        TB_BASE_CALENDAR BC   
    LEFT OUTER JOIN
        (
            SELECT
                BRAND_ID,
                STORE_ID,
                SUM(IF(ISNULL(USER_ID),
                1,
                0)) AS OFFLINE,
                SUM(IF(ISNULL(USER_ID),
                0,
                1)) AS ONLINE,
                DATE_FORMAT(SALES_TM_LOCAL,
                '%Y-%m-%d') AS YMD       
            FROM
                TB_SVC_SALES       
            WHERE
                SALES_TM_LOCAL BETWEEN ADDDATE(#{salesFromDate}, INTERVAL 0 SECOND) AND ADDDATE(#{salesToDate}, INTERVAL '23:59:59' HOUR_SECOND)       
                AND SALES_ST = 809001
                <if test="brandId != null">               
                AND BRAND_ID = ${brandId}
                </if>
                <if test="storeId != null">
                AND STORE_ID = ${storeId}
                </if>
            GROUP BY
                YMD     
        ) A 
            ON BC.YMD = A.YMD   
    WHERE
        BC.YMD BETWEEN ADDDATE(#{calendarFromDate}, INTERVAL 0 SECOND) AND ADDDATE(#{calendarToDate}, INTERVAL '23:59:59' HOUR_SECOND)   
    ORDER BY
        BC.YMD
  </select>
	
	<!-- Recently Reviews  -->
	<resultMap id="ReviewsListResultMap" type="java.util.LinkedHashMap" autoMapping="false">
	    <result column="CREATED" jdbcType="TIMESTAMP" property="created" />
	    <result column="STORE_NM" jdbcType="VARCHAR" property="storeNm" />
	    <result column="RATING" jdbcType="VARCHAR" property="rating" />
	    <result column="MB_BK" jdbcType="VARCHAR" property="mbBk"  typeHandler="com.jc.pico.utils.mybatis.typehandler.MobileSecurityTypeHandler" />
	</resultMap>
	<select id="getReviewsList" parameterType="hashMap" resultMap="ReviewsListResultMap"> 
		SELECT 
		        SR.CREATED
		      , S.STORE_NM
		      , SR.RATING
		      , U.MB_BK
    FROM TB_SVC_STORE_REVIEW SR
    LEFT OUTER JOIN TB_USER U ON SR.USER_ID = U.ID
    LEFT OUTER JOIN TB_SVC_STORE S ON SR.STORE_ID = S.ID
    WHERE
            1 = 1
      AND U.STATUS = 301001
    <if test="brandId != null">
     AND SR.BRAND_ID = ${brandId}
     </if>
     
     <if test="storeId != null">
     AND SR.STORE_ID = ${storeId}
     </if>
     <if test="fromDate != null">
      AND SR.CREATED BETWEEN ADDDATE(#{fromDate}, INTERVAL 0 SECOND) AND ADDDATE(#{fromDate}, INTERVAL '23:59:59' HOUR_SECOND)
      </if>
    ORDER BY SR.CREATED DESC
		LIMIT 0, 4
	</select>
	
	<select id="getReviewsListCount" parameterType="hashMap" resultType="int"> 
    SELECT 
            COUNT(*)
    FROM TB_SVC_STORE_REVIEW SR
    LEFT OUTER JOIN TB_USER U ON SR.USER_ID = U.ID
    LEFT OUTER JOIN TB_SVC_STORE S ON SR.STORE_ID = S.ID
    WHERE
            1 = 1
    <if test="brandId != null">
     AND SR.BRAND_ID = ${brandId}
     </if>
    <if test="storeId != null">
     AND SR.STORE_ID = ${storeId}
     </if>
     <if test="fromDate != null">
      AND SR.CREATED BETWEEN ADDDATE(#{fromDate}, INTERVAL 0 SECOND) AND ADDDATE(#{fromDate}, INTERVAL '23:59:59' HOUR_SECOND)
      </if>
  </select>
	
	<!-- Today Stamp  -->
	<resultMap id="StampDataResultMap" type="java.util.LinkedHashMap" autoMapping="false">
	    <result column="STORE_CNT" jdbcType="INTEGER" property="storeCnt"/>
	    <result column="SAVE_STAMP" jdbcType="INTEGER" property="saveStamp"/>
	    <result column="CANCEL_STAMP" jdbcType="INTEGER" property="cancelStamp"/>
	</resultMap>
	<select id="getStampData" parameterType="hashMap" resultMap="StampDataResultMap"> 
<!-- 
 오늘의 브랜드 매장 스탬프 합계
 조건 1. 영업일 스탬프 것만
 조건 2. 스탬프 상태가 '적립', '사용' 인것만 따로 카운트
 조건 3. 스탬프 상태가 '취소' 인것만 따로 카운트

 로직
  1. 스탬프의 결제 ID > 결제 데이터 중 개점일 >
  2. 각 매장의 마지막 개점일 > 1의 결제 매장 개점일의 개점일이 같은 결제의 스탬프 만.. 뿌려야 함
  -->
  SELECT
        COUNT(STORE_ID) AS STORE_CNT ,
        IFNULL(SUM((SAVE_STAMP + USE_STAMP)),0) AS SAVE_STAMP ,
        IFNULL(SUM(CANCEL_STAMP),0) AS CANCEL_STAMP 
    FROM
        ( SELECT
            SUS.STORE_ID ,
            IF(STAMP_ST='401001',COUNT(STAMP_ST),0) AS SAVE_STAMP ,
            IF(STAMP_ST='401002',COUNT(STAMP_ST),0) AS CANCEL_STAMP ,
            IF(STAMP_ST='401003',COUNT(STAMP_ST),0) AS USE_STAMP 
        FROM
            (SELECT
                SUS.* 
            FROM
                (SELECT
                    * 
                FROM
                    TB_SVC_USER_STAMP 
                WHERE 1 = 1
                <if test="brandId != null"> 
                AND BRAND_ID = ${brandId}
                </if>
                <if test="storeId != null">
                 AND STORE_ID = ${storeId}
                </if>
                 ) SUS 
            LEFT OUTER JOIN
                (
                    SELECT
                        ID ,
                        BRAND_ID ,
                        STORE_ID
                    FROM
                        TB_SVC_SALES 
                    WHERE SALES_ST = 809001
                    AND SALES_TM_LOCAL BETWEEN ADDDATE(#{fromDate}, INTERVAL 0 SECOND) AND ADDDATE(#{fromDate}, INTERVAL '23:59:59' SECOND)
                    <if test="brandId != null">
                    AND BRAND_ID = ${brandId} 
                    </if>
                    <if test="storeId != null">
                    AND STORE_ID = ${storeId}
                    </if>
                    GROUP BY
                        STORE_ID 
                ) SS 
                    ON SUS.SALES_ID = SS.ID 
            ) SUS 
          LEFT OUTER JOIN TB_SVC_STORE ST ON SUS.STORE_ID = ST.ID 
          GROUP BY SUS.STORE_ID 
        ) ST  
	</select>
	
	<!-- This week Coupon Issue  -->
	<resultMap id="CouponIssueListResultMap" type="java.util.LinkedHashMap" autoMapping="false">
	  <result column="SUN" jdbcType="VARCHAR" property="sun" />
    <result column="MON" jdbcType="VARCHAR" property="mon" />
    <result column="TUE" jdbcType="VARCHAR" property="tue" />
    <result column="WED" jdbcType="VARCHAR" property="wed" />
    <result column="THU" jdbcType="VARCHAR" property="thu" />
    <result column="FRI" jdbcType="VARCHAR" property="fri" />
    <result column="SAT" jdbcType="VARCHAR" property="sat" />
	</resultMap>
	<select id="getCouponIssueList" parameterType="hashMap" resultMap="CouponIssueListResultMap"> 
			/*
			
			이번 주의 브랜드 매장 쿠폰 적립
			
			조건 1. TB_SVC_USER_COUPON의 COUPON_ST가  '402001(발행)',  '402003(사용)', '402005(만료)' 인 것만
			조건 2. 특정 브랜드의 쿠폰 데이터를 보여줘야 함
			조건 3. 최근 일주일에 적립된 쿠폰이어야 함
			조건 4. 최근 일주일 데이터를 보여줘야 함
			
			*/
			SELECT 
					   IFNULL(SUM(IF(DAYOFWEEK=0,1, 0)),0) AS 'SUN'
					  ,IFNULL(SUM(IF(DAYOFWEEK=1,1, 0)),0) AS 'MON'
					  ,IFNULL(SUM(IF(DAYOFWEEK=2,1, 0)),0) AS 'TUE'
					  ,IFNULL(SUM(IF(DAYOFWEEK=3,1, 0)),0) AS 'WED'
					  ,IFNULL(SUM(IF(DAYOFWEEK=4,1, 0)),0) AS 'THU'
					  ,IFNULL(SUM(IF(DAYOFWEEK=5,1, 0)),0) AS 'FRI'
					  ,IFNULL(SUM(IF(DAYOFWEEK=6,1, 0)),0) AS 'SAT'
			FROM (
			    SELECT 
			        ID
			      , BRAND_ID
			      , STORE_ID
			      , DAYOFWEEK(CREATED) AS DAYOFWEEK
			    FROM TB_SVC_USER_COUPON
			    WHERE COUPON_ST IN (402001, 402003, 402005)
			    <if test="brandId != null">
			    AND BRAND_ID = ${brandId}
			    </if>
			     <if test="storeId != null">
          AND STORE_ID = ${storeId}
          </if>
			    <if test="fromDate != null">
			    AND CREATED BETWEEN ADDDATE(ADDDATE(#{fromDate}, INTERVAL -6 DAY), INTERVAL 0 SECOND) AND ADDDATE(#{fromDate}, INTERVAL '23:59:59' HOUR_SECOND)
			    </if>
			   ) A
			WHERE 1 = 1
			<if test="brandId != null">
			AND A.BRAND_ID = ${brandId}
			</if>
		 <if test="storeId != null">
       AND A.STORE_ID = ${storeId}
      </if>
	</select>
	
	<!-- This week Coupon Use  -->
	<select id="getCouponUseList" parameterType="hashMap" resultMap="CouponIssueListResultMap"> 
      SELECT 
             IFNULL(SUM(IF(DAYOFWEEK=0,1, 0)),0) AS 'SUN'
            ,IFNULL(SUM(IF(DAYOFWEEK=1,1, 0)),0) AS 'MON'
            ,IFNULL(SUM(IF(DAYOFWEEK=2,1, 0)),0) AS 'TUE'
            ,IFNULL(SUM(IF(DAYOFWEEK=3,1, 0)),0) AS 'WED'
            ,IFNULL(SUM(IF(DAYOFWEEK=4,1, 0)),0) AS 'THU'
            ,IFNULL(SUM(IF(DAYOFWEEK=5,1, 0)),0) AS 'FRI'
            ,IFNULL(SUM(IF(DAYOFWEEK=6,1, 0)),0) AS 'SAT'
      FROM (
          SELECT 
              ID
            , BRAND_ID
            , STORE_ID
            , DAYOFWEEK(CREATED) AS DAYOFWEEK
          FROM TB_SVC_USER_COUPON
          WHERE COUPON_ST IN (402003)
          <if test="brandId != null">
          AND BRAND_ID = ${brandId}
          </if>
          <if test="storeId != null">
          AND STORE_ID = ${storeId}
          </if>
          <if test="fromDate != null">
          AND CREATED BETWEEN ADDDATE(ADDDATE(#{fromDate}, INTERVAL -6 DAY), INTERVAL 0 SECOND) AND ADDDATE(#{fromDate}, INTERVAL '23:59:59' HOUR_SECOND)
          </if>
         ) A
      WHERE 1 = 1
      <if test="brandId != null">
      AND A.BRAND_ID = ${brandId}
      </if>
       <if test="storeId != null">
      AND A.STORE_ID = ${storeId}
      </if>
	</select>
</mapper>
